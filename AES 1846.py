#AA1846

numberOfcolums = 4
numberOfRounds = 10
numberOfWordsInKey = 4

def main():

    print()
    pText = input('Enter your message to be encrypted : ').encode()
    print("\nYou can add both characters and numbers as the key.\n")
    key = input('Enter key : ')
    print()

    if len(key) > 16:
        print('Invalid Key.')
        return

    for symbol in key:
        if ord(symbol) > 0xff:
            print('Invalid Key')
            return

    encryptedBytes = []
    temp = []
    for byte in pText:
        temp.append(byte)
        if len(temp) == 16:
            Encrypted16Bytes = AES128Encryption(temp, key)
            encryptedBytes.extend(Encrypted16Bytes)
            temp = []

    emptySpaces = None
    if 0 < len(temp) < 16:
            emptySpaces = 16 - len(temp)
            for i in range(emptySpaces - 1):
                temp.append(0)
            temp.append(1)
            Encrypted16Bytes = AES128Encryption(temp, key)
            encryptedBytes.extend(Encrypted16Bytes)

    encryptedMessage = bytes(encryptedBytes)

    print("Encrypted ciphertext is (in bytes) : ", encryptedMessage)


    decryptedBytes = []
    temp = []
    for byte in encryptedMessage:
        temp.append(byte)
        if len(temp) == 16:
            Decrypted16Bytes = AES128Decryption(temp, key)
            decryptedBytes.extend(Decrypted16Bytes)
            temp = []

    if emptySpaces != None:
        decryptedMessage = bytes(decryptedBytes[ : -emptySpaces])
    else:
        decryptedMessage = bytes(decryptedBytes)

    print("Decrypted pText is (in bytes) : ", decryptedMessage)
    print()

def AES128Encryption(pTextBytes, key):

    state = [[] for j in range(4)]

    for row in range(4):
        for column in range(numberOfcolums):
            state[row].append(pTextBytes[row + 4 * column])

    keySchedule = keyExpansion(key)

    round = 0
    state = addRoundKey(state, keySchedule, round)

    for round in range(1, numberOfRounds):
        state = subBytes(state, False)
        state = shiftRows(state, False)
        state = mixColumns(state, False)
        state = addRoundKey(state, keySchedule, round)

    state = subBytes(state, False)
    state = shiftRows(state, False)
    state = addRoundKey(state, keySchedule, round + 1)

    output = [None for i in range(4 * numberOfcolums)]
    for row in range(4):
        for column in range(numberOfcolums):
            output[row + 4 * column] = state[row][column]

    return output

def AES128Decryption(ciphertextBytes, key):

    state = [[] for i in range(numberOfcolums)]

    for row in range(4):
        for column in range(numberOfcolums):
            state[row].append(ciphertextBytes[row + 4 * column])

    keySchedule = keyExpansion(key)

    state = addRoundKey(state, keySchedule, numberOfRounds)

    round = numberOfRounds - 1
    for round in range(round, 0, -1):
        state = shiftRows(state, True)
        state = subBytes(state, True)
        state = addRoundKey(state, keySchedule, round)
        state = mixColumns(state, True)

    round -= 1

    state = shiftRows(state, True)
    state = subBytes(state, True)
    state = addRoundKey(state, keySchedule, round)

    output = [None for i in range(4 * numberOfcolums)]
    for row in range(4):
        for column in range(numberOfcolums):
            output[row + 4 * column] = state[row][column]

    return output

Sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

inverseSbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

def subBytes(state, inverse):

    box = Sbox
    if inverse == True:
        box = inverseSbox

    for i in range(len(state)):
        for j in range(len(state[i])):

            row = state[i][j] // 0x10
            column = state[i][j] % 0x10

            boxElement = box[16 * row + column]
            state[i][j] = boxElement

    return state


def shiftRows(state, inverse):

    count = 1

    if inverse == True:
        for i in range(1, numberOfcolums):
            state[i] = rightShift(state[i], count)
            count += 1
    else:
        for i in range(1, numberOfcolums):
            state[i] = leftShift(state[i], count)
            count += 1

    return state

def leftShift(array, count):

    return array[count:] + array[:count]


def rightShift(array, count):

    return array[-count:] + array[:-count]


def mixColumns(state, inverse):

    for i in range(numberOfcolums):

        if inverse == True:
            s0 = multiplyBy0x0e(state[0][i]) ^ multiplyBy0x0b(state[1][i]) ^ multiplyBy0x0d(state[2][i]) ^ multiplyBy0x09(state[3][i])
            s1 = multiplyBy0x09(state[0][i]) ^ multiplyBy0x0e(state[1][i]) ^ multiplyBy0x0b(state[2][i]) ^ multiplyBy0x0d(state[3][i])
            s2 = multiplyBy0x0d(state[0][i]) ^ multiplyBy0x09(state[1][i]) ^ multiplyBy0x0e(state[2][i]) ^ multiplyBy0x0b(state[3][i])
            s3 = multiplyBy0x0b(state[0][i]) ^ multiplyBy0x0d(state[1][i]) ^ multiplyBy0x09(state[2][i]) ^ multiplyBy0x0e(state[3][i])
        else:
            s0 = multiplyBy0x02(state[0][i]) ^ multiplyBy0x03(state[1][i]) ^ state[2][i] ^ state[3][i]
            s1 = state[0][i] ^ multiplyBy0x02(state[1][i]) ^ multiplyBy0x03(state[2][i]) ^ state[3][i]
            s2 = state[0][i] ^ state[1][i] ^ multiplyBy0x02(state[2][i]) ^ multiplyBy0x03(state[3][i])
            s3 = multiplyBy0x03(state[0][i]) ^ state[1][i] ^ state[2][i] ^ multiplyBy0x02(state[3][i])

        state[0][i] = s0
        state[1][i] = s1
        state[2][i] = s2
        state[3][i] = s3

    return state

RCON = [
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
]

def keyExpansion(key):

    keySymbols = [ord(symbol) for symbol in key]

    if len(keySymbols) < 4 * numberOfWordsInKey:
        for i in range(4 * numberOfWordsInKey - len(keySymbols)):
            keySymbols.append(0x01)

    keySchedule = [[] for i in range(4)]
    for row in range(4):
        for column in range(numberOfWordsInKey):
            keySchedule[row].append(keySymbols[row + 4 * column])

    for column in range(numberOfWordsInKey, numberOfcolums * (numberOfRounds + 1)):

        if column % numberOfWordsInKey == 0:
            temp = [keySchedule[row][column - 1] for row in range(1, 4)]
            temp.append(keySchedule[0][column - 1])

            for j in range(len(temp)):

                SboxRow = temp[j] // 0x10
                SboxColumn = temp[j] % 0x10
                SboxElement = Sbox[16 * SboxRow + SboxColumn]
                temp[j] = SboxElement

            for row in range(4):
                s = (keySchedule[row][column - 4]) ^ (temp[row]) ^ (RCON[row][int(column / numberOfWordsInKey - 1)])
                keySchedule[row].append(s)
        else:
            for row in range(4):
                s = keySchedule[row][column - 4] ^ keySchedule[row][column - 1]
                keySchedule[row].append(s)

    return keySchedule


def addRoundKey(state, keySchedule, round):

    for column in range(numberOfWordsInKey):

        s0 = state[0][column] ^ keySchedule[0][numberOfcolums * round + column]
        s1 = state[1][column] ^ keySchedule[1][numberOfcolums * round + column]
        s2 = state[2][column] ^ keySchedule[2][numberOfcolums * round + column]
        s3 = state[3][column] ^ keySchedule[3][numberOfcolums * round + column]

        state[0][column] = s0
        state[1][column] = s1
        state[2][column] = s2
        state[3][column] = s3
        
    return state

def multiplyBy0x02(number):
    if number < 0x80:
        result = (number << 1)
    else:
        result = (number << 1) ^ 0x1b

    result = result % 0x100

    return result


def multiplyBy0x03(number):
    return (multiplyBy0x02(number) ^ number)

def multiplyBy0x09(number):
    return multiplyBy0x02(multiplyBy0x02(multiplyBy0x02(number))) ^ number

def multiplyBy0x0b(number):
    return multiplyBy0x02(multiplyBy0x02(multiplyBy0x02(number))) ^ multiplyBy0x02(number) ^ number

def multiplyBy0x0d(number):
    return multiplyBy0x02(multiplyBy0x02(multiplyBy0x02(number))) ^ multiplyBy0x02(multiplyBy0x02(number)) ^ number


def multiplyBy0x0e(number):
    return multiplyBy0x02(multiplyBy0x02(multiplyBy0x02(number))) ^ multiplyBy0x02(multiplyBy0x02(number)) ^ multiplyBy0x02(number)

if __name__ == '__main__':
    main()
